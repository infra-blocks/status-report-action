name: Status Report Action
description: |
  This action provides a status report from a reusable GitHub action or workflow as a PR comment. The report
  is updated in place everytime it is published.

inputs:
  mode:
    description: |
      The action mode. Either "upsert" or "clear".
    required: false
    default: upsert
  body:
    description: |
      The report content.
    required: false
  issue-number:
    description: |
      The issue where to post the comment. This defaults to the PR number on pull request events,
      otherwise, it should be provided.
    required: false
    default:
      ${{ github.event.pull_request.number }}
  repository:
    description: |
      The repository of the action that is publishing the report. Defaults to env.status-report-action-repository.
    required: false

outputs:
  comment-id:
    description: The comment ID of the status report.
    value: ${{ steps.upsert-comment.outputs.comment-id }}

runs:
  using: "composite"
  steps:
    - id: parse-inputs
      name: Parse inputs
      shell: bash
      run: |
        valid_modes=("upsert" "clear")
        if test -z "$(echo ${valid_modes[@]} | fgrep -w "${{ inputs.mode }}" )"; then
          echo "Invalid mode: ${{ inputs.mode }}! Expected 'upsert' or 'clear'"
          exit 1
        fi
        mode="${{ inputs.mode }}"
        
        if test "${mode}" = "upsert"; then
          if test -z "${{ inputs.body }}"; then
            echo "When mode is 'upsert' a body must be provided!"
            exit 1
          fi
        fi
        
        if test -z "${{ inputs.repository }}"; then
          repository="${{ env.status-report-action-repository }}"
        else
          repository="${{ inputs.repository }}"
        fi
        
        if test -z "${repository}"; then
          echo "Must provide a value for the repository input"
          exit 1
        fi
                
        title="${repository#*/}"
        link="https://github.com/${repository}"
        
        echo "mode=${mode}" >> "${GITHUB_OUTPUT}"
        echo "repository=${repository}" >> "${GITHUB_OUTPUT}"
        echo "title=${title}" >> "${GITHUB_OUTPUT}"
        echo "link=${link}" >> "${GITHUB_OUTPUT}"
    - id: upsert-comment
      if: ${{ steps.parse-inputs.outputs.mode == 'upsert' }}
      uses: infrastructure-blocks/upsert-comment-action@v1
      with:
        issue-number: ${{ inputs.issue-number }}
        body: |
          [${{ steps.parse-inputs.outputs.title }}](${{ steps.parse-inputs.outputs.link }}) Report
          ---
          ${{ inputs.body }}
        matches: '^\[${{ steps.parse-inputs.outputs.title }}\]\(${{ steps.parse-inputs.outputs.link }}\) Report'
    - id: find-comment
      if: ${{ steps.parse-inputs.outputs.mode == 'clear' }}
      uses: peter-evans/find-comment@v2
      with:
        issue-number: ${{ inputs.issue-number }}
        comment-author: github-actions[bot]
        body-regex: '^\[${{ steps.parse-inputs.outputs.title }}\]\(${{ steps.parse-inputs.outputs.link }}\) Report'
    - id: delete-comment
      if: ${{ steps.parse-inputs.outputs.mode == 'clear' && steps.find-comment.outputs.comment-id != '' }}
      uses: actions/github-script@v7
      with:
        script: | 
          github.rest.issues.deleteComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: "${{ steps.find-comment.outputs.comment-id }}"
          })
